{
#include<bits/stdc++.h>
using namespace std;
/* Link list node */
struct node *reverse (struct node *head, int k);
struct node
{
    int data;
    struct node* next;
}*head;
/* UTILITY FUNCTIONS */
/* Function to push a node */
  void insert()
{
    int n,value;
    cin>>n;
    struct node *temp;
    for(int i=0;i<n;i++)
    {
        cin>>value;
        if(i==0)
        {
            head=(struct node *) malloc( sizeof(struct node) );
            head->data=value;
            head->next=NULL;
            temp=head;
            continue;
        }
        else
        {
            temp->next= (struct node *) malloc( sizeof(struct node) );
            temp=temp->next;
            temp->data=value;
            temp->next=NULL;
        }
    }
}
/* Function to print linked list */
void printList(struct node *node)
{
    while (node != NULL)
    {
        printf("%d ", node->data);
        node = node->next;
    }
printf("
");
}
/* Drier program to test above function*/
int main(void)
{
    /* Start with the empty list */
    int t,k,value,n;
     cin>>t;
     while(t--)
     {
     insert();
     cin>>k;
     head = reverse(head, k);
     printList(head);
     }
     return(0);
}

}


struct node *reverse (struct node *head, int k)
{ 
    node *curr,*prev,*parent = NULL;
    curr = head;    prev = NULL;
    int i = 0;
    stack<node*> s;
    while(curr!=NULL)
    {
        if(s.size() < k)
        {
            s.push(curr);
            curr = curr->next;
        }
        
        if(s.size() == k || (curr==NULL && s.size()<k))
        {
            if(parent!=NULL)
                parent->next = s.top();
            while(!s.empty())
            {
                node* ptr = s.top();    s.pop();
                if(i==0)
                {
                    head = ptr;
                }
                i++;
                if(!s.empty())
                {
                    ptr->next = s.top();
                }
                else
                {
                    parent = ptr;
                    ptr->next = curr;
                }
            }
        }
    }
    
    return head;
}
